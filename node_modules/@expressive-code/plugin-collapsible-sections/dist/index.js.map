{"version":3,"sources":["../src/index.ts","../src/utils.ts","../src/ast.ts","../src/styles.ts"],"sourcesContent":["import { AttachedPluginData, ExpressiveCodePlugin, PluginTexts } from '@expressive-code/core'\nimport { select } from '@expressive-code/core/hast'\nimport type { CollapseStyle, Section } from './utils'\nimport { parseCollapseStyle, parseSections } from './utils'\nimport { sectionizeAst } from './ast'\nimport type { CollapsibleSectionsStyleSettings } from './styles'\nimport { collapsibleSectionsStyleSettings, getCollapsibleSectionsBaseStyles } from './styles'\n\nexport type { CollapsibleSectionsStyleSettings }\n\ndeclare module '@expressive-code/core' {\n\texport interface StyleSettings {\n\t\tcollapsibleSections: CollapsibleSectionsStyleSettings\n\t}\n}\n\nexport interface PluginCollapsibleSectionsProps {\n\t/**\n\t * Collapses the given line range or ranges.\n\t */\n\tcollapse: string | string[]\n\t/**\n\t * Determines if the summary line content of collapsible sections should be indented\n\t * to match the minimum indent level of the contained code lines.\n\t *\n\t * @default true\n\t */\n\tcollapsePreserveIndent: boolean\n\t/**\n\t * Allows to select one of the following collapsible section styles:\n\t *\n\t * - `github`: The default style, similar to the one used by GitHub.\n\t *   A summary line with an expand icon and the default text `X collapsed lines` is shown.\n\t *   When expanded, the summary line is replaced by the section's code lines.\n\t *   It is not possible to re-collapse the section.\n\t * - `collapsible-start`: When collapsed, the summary line looks like the `github` style.\n\t *   However, when expanded, it remains visible above the expanded code lines,\n\t *   making it possible to re-collapse the section.\n\t * - `collapsible-end`: Same as `collapsible-start`, but the summary line remains visible\n\t *   below the expanded code lines.\n\t * - `collapsible-auto`: Automatically selects `collapsible-start` or `collapsible-end`\n\t *   based on the location of the collapsible section in the code block.\n\t *   Uses `collapsible-start` unless the section ends at the bottom of the code block,\n\t *   in which case `collapsible-end` is used.\n\t *\n\t * @default 'github'\n\t */\n\tcollapseStyle: CollapseStyle\n}\n\ndeclare module '@expressive-code/core' {\n\texport interface ExpressiveCodeBlockProps extends PluginCollapsibleSectionsProps {}\n}\n\nexport const pluginCollapsibleSectionsTexts = new PluginTexts({\n\tcollapsedLines: '{lineCount} collapsed {lineCount;1=line;lines}',\n})\n\npluginCollapsibleSectionsTexts.addLocale('de', {\n\tcollapsedLines: '{lineCount} ausgeblendete {lineCount;1=Zeile;Zeilen}',\n})\n\nexport function pluginCollapsibleSections(): ExpressiveCodePlugin {\n\treturn {\n\t\tname: 'Collapsible sections',\n\t\tstyleSettings: collapsibleSectionsStyleSettings,\n\t\tbaseStyles: (context) => getCollapsibleSectionsBaseStyles(context),\n\t\thooks: {\n\t\t\tpreprocessMetadata: ({ codeBlock }) => {\n\t\t\t\tconst toArray = (value: string | string[] | undefined) => {\n\t\t\t\t\tif (value === undefined) return []\n\t\t\t\t\treturn Array.isArray(value) ? value : [value]\n\t\t\t\t}\n\n\t\t\t\t// Transfer meta options to props\n\t\t\t\tcodeBlock.props.collapsePreserveIndent = codeBlock.metaOptions.getBoolean('collapsePreserveIndent') ?? codeBlock.props.collapsePreserveIndent\n\t\t\t\tconst ranges = [...toArray(codeBlock.props.collapse), ...codeBlock.metaOptions.getRanges('collapse')]\n\t\t\t\tcodeBlock.props.collapse = ranges\n\t\t\t\tcodeBlock.props.collapseStyle = parseCollapseStyle(codeBlock.metaOptions.getString('collapseStyle') ?? codeBlock.props.collapseStyle ?? 'github')\n\n\t\t\t\t// Parse the given ranges into sections and store references to the targeted lines,\n\t\t\t\t// allowing us to react to potential line number changes\n\t\t\t\tif (!ranges) return\n\t\t\t\tconst sections = parseSections(ranges.join(','))\n\t\t\t\tsections.forEach((section) => {\n\t\t\t\t\tsection.lines.push(...codeBlock.getLines(section.from - 1, section.to))\n\t\t\t\t})\n\t\t\t\tconst data = pluginCollapsibleSectionsData.getOrCreateFor(codeBlock)\n\t\t\t\tdata.sections = sections\n\t\t\t},\n\t\t\tannotateCode: ({ codeBlock }) => {\n\t\t\t\tconst data = pluginCollapsibleSectionsData.getOrCreateFor(codeBlock)\n\t\t\t\tif (!data.sections.length) return\n\t\t\t\t// Update from/to line numbers to account for any line number changes\n\t\t\t\tconst lines = codeBlock.getLines()\n\t\t\t\tfor (let i = data.sections.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst section = data.sections[i]\n\t\t\t\t\tconst indices = section.lines.map((line) => lines.indexOf(line)).filter((index) => index > -1)\n\t\t\t\t\t// If no more lines are present, remove the section\n\t\t\t\t\tif (!indices.length) {\n\t\t\t\t\t\tdata.sections.splice(i, 1)\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tsection.from = Math.min(...indices) + 1\n\t\t\t\t\tsection.to = Math.max(...indices) + 1\n\t\t\t\t}\n\t\t\t},\n\t\t\tpostprocessRenderedBlock: ({ codeBlock, renderData, renderEmptyLine, locale }) => {\n\t\t\t\tconst data = pluginCollapsibleSectionsData.getOrCreateFor(codeBlock)\n\t\t\t\tif (!data.sections.length) return\n\t\t\t\tconst codeAst = select('pre > code', renderData.blockAst)\n\t\t\t\tif (!codeAst) return\n\t\t\t\tcodeAst.children = sectionizeAst({\n\t\t\t\t\tcodeBlock,\n\t\t\t\t\tlines: codeAst.children,\n\t\t\t\t\tsections: data.sections,\n\t\t\t\t\ttext: pluginCollapsibleSectionsTexts.get(locale).collapsedLines,\n\t\t\t\t\trenderEmptyLine,\n\t\t\t\t})\n\t\t\t},\n\t\t},\n\t}\n}\n\nexport const pluginCollapsibleSectionsData = new AttachedPluginData<{ sections: Section[] }>(() => ({ sections: [] }))\n","import { ExpressiveCodeLine } from '@expressive-code/core'\n\nexport type Section = { from: number; to: number; lines: ExpressiveCodeLine[] }\n\n/** Transforms a meta string of sections (e.g. '1-2, 4-8') into a list of section objects */\nexport function parseSections(value: string): Section[] {\n\tconst sections: Section[] = []\n\tvalue\n\t\t.split(',')\n\t\t.map((section) => section.split('-').map((lineNum: string) => parseInt(lineNum)))\n\t\t.forEach((list) => {\n\t\t\t// skip any entries that don't have exactly 2 entries (e.g. '1-2-3' or '1-')\n\t\t\tif (list.length !== 2) return\n\t\t\tconst [from, to] = list\n\n\t\t\t// skip any entries that failed to parse as numbers\n\t\t\tif (isNaN(from) || isNaN(to)) return\n\n\t\t\t// skip any entries that aren't increasing\n\t\t\tif (from > to) return\n\n\t\t\t// skip any entries that overlap existing sections, since our <details>-based approach can't overlap\n\t\t\tfor (const { from: existingFrom, to: existingTo } of sections) {\n\t\t\t\tif (from >= existingFrom && from <= existingTo) return\n\t\t\t\tif (to >= existingFrom && to <= existingTo) return\n\t\t\t}\n\n\t\t\tsections.push({ from, to, lines: [] })\n\t\t})\n\treturn sections\n}\n\nconst collapseStyles = ['github', 'collapsible-start', 'collapsible-end', 'collapsible-auto'] as const\nexport type CollapseStyle = (typeof collapseStyles)[number]\n\nexport function parseCollapseStyle(value: string): CollapseStyle {\n\tvalue = value.toLowerCase()\n\tif (collapseStyles.includes(value as CollapseStyle)) return value as CollapseStyle\n\treturn 'github'\n}\n","import { formatTemplate, ExpressiveCodeBlock, RenderEmptyLineFn } from '@expressive-code/core'\nimport type { Element, ElementContent } from '@expressive-code/core/hast'\nimport { setInlineStyle, h } from '@expressive-code/core/hast'\nimport type { Section } from './utils'\nimport { collapsibleSectionClass } from './styles'\n\n/**\n * Transforms a list of line ASTs into one containing the provided collapsible sections\n */\nexport function sectionizeAst({\n\tcodeBlock,\n\tlines,\n\tsections,\n\ttext,\n\trenderEmptyLine,\n}: {\n\tcodeBlock: ExpressiveCodeBlock\n\tlines: ElementContent[]\n\tsections: Section[]\n\ttext: string\n\trenderEmptyLine: RenderEmptyLineFn\n}): ElementContent[] {\n\tconst { collapseStyle = 'github' } = codeBlock.props\n\tconst outp = [...lines]\n\n\t// By sorting from last to first, we're certain that the relevant lines can still be looked up by their index\n\t;[...sections]\n\t\t.sort((a, b) => b.to - a.to)\n\t\t.forEach(({ from, to }) => {\n\t\t\tconst contentLines = lines.slice(from - 1, to)\n\n\t\t\t// Determine information about the minimum indent level of the collapsed lines\n\t\t\t// unless disabled in the props\n\t\t\tconst minIndent =\n\t\t\t\tcodeBlock.props.collapsePreserveIndent !== false &&\n\t\t\t\tcodeBlock.getLines(from - 1, to).reduce((acc, line) => {\n\t\t\t\t\tif (line.text.trim().length === 0) return acc\n\t\t\t\t\treturn Math.min(acc, line.text.match(/^\\s*/)?.[0].length ?? 0)\n\t\t\t\t}, Infinity)\n\n\t\t\t// Create the summary line for the collapsible section and wrap it in a summary element\n\t\t\tconst summaryLine = renderEmptyLine()\n\t\t\tif (minIndent && minIndent < Infinity) setInlineStyle(summaryLine.lineAst, '--ecIndent', `${minIndent}ch`)\n\t\t\tsummaryLine.codeWrapper.children.push(h('span.expand'), h('span.collapse'), h('span.text', formatTemplate(text, { lineCount: contentLines.length })))\n\t\t\tconst summary = h('summary', summaryLine.lineAst)\n\n\t\t\t// Create an outer wrapper based on the collapse style\n\t\t\tconst resolvedCollapseStyle = collapseStyle === 'collapsible-auto' ? (to >= lines.length ? 'collapsible-end' : 'collapsible-start') : collapseStyle\n\t\t\tconst outerSelector = `.${collapsibleSectionClass}.${resolvedCollapseStyle}`\n\t\t\tlet outerElement: Element\n\t\t\tif (collapseStyle === 'github') {\n\t\t\t\touterElement = h(`details${outerSelector}`, [summary, ...contentLines])\n\t\t\t} else {\n\t\t\t\touterElement = h(`div${outerSelector}`, [h(`details`, [summary]), h(`div.content-lines`, contentLines)])\n\t\t\t}\n\n\t\t\toutp.splice(from - 1, to - from + 1, outerElement)\n\t\t})\n\n\treturn outp\n}\n","import { PluginStyleSettings, ResolverContext, codeLineClass, setAlpha } from '@expressive-code/core'\n\nexport const collapsibleSectionClass = 'ec-section'\n\nexport interface CollapsibleSectionsStyleSettings {\n\t/**\n\t * The border width of the summary line.\n\t *\n\t * Note: Despite the setting prefix `closed`, summary lines are also visible\n\t * while the section is open when using any of the `collapsible-*` styles.\n\t * This is the same for all `closed*` settings.\n\t * @default '0'\n\t */\n\tclosedBorderWidth: string\n\t/**\n\t * The block padding of the summary line.\n\t * @default '4px'\n\t */\n\tclosedPaddingBlock: string\n\t/**\n\t * The margin around the summary line.\n\t * @default '0'\n\t */\n\tclosedMargin: string\n\t/**\n\t * The font family of the section summary line.\n\t * @default 'inherit'\n\t */\n\tclosedFontFamily: string\n\t/**\n\t * The font size of the section summary line.\n\t * @default 'inherit'\n\t */\n\tclosedFontSize: string\n\t/**\n\t * The line height of the section summary line.\n\t * @default 'inherit'\n\t */\n\tclosedLineHeight: string\n\t/**\n\t * The text color of the section summary line.\n\t * @default 'inherit'\n\t */\n\tclosedTextColor: string\n\t/**\n\t * The background color of the summary line.\n\t * @default\n\t * ({ theme }) => setAlpha(theme.colors['editor.foldBackground'], 0.2) || 'rgb(84 174 255 / 20%)'\n\t */\n\tclosedBackgroundColor: string\n\t/**\n\t * The border color of the summary line.\n\t * @default\n\t * ({ theme }) => setAlpha(theme.colors['editor.foldBackground'], 0.5) || 'rgb(84 174 255 / 50%)'\n\t */\n\tclosedBorderColor: string\n\t/**\n\t * The width of the border around expanded code lines.\n\t * @default '1px'\n\t */\n\topenBorderWidth: string\n\t/**\n\t * The color of the border around expanded code lines.\n\t * @default 'transparent'\n\t */\n\topenBorderColor: string\n\t/**\n\t * The padding of open sections.\n\t * @default '0'\n\t */\n\topenPadding: string\n\t/**\n\t * The margin around open sections.\n\t * @default '0'\n\t */\n\topenMargin: string\n\t/**\n\t * The background color of expanded code lines when using the default `github` style.\n\t * @default 'transparent'\n\t */\n\topenBackgroundColor: string\n\t/**\n\t * The background color of expanded code lines when using any of the `collapsible-*` styles.\n\t * @default\n\t * ({ theme }) => setAlpha(theme.colors['editor.foldBackground'], 0.1) || 'rgb(84 174 255 / 10%)'\n\t */\n\topenBackgroundColorCollapsible: string\n}\n\nexport const collapsibleSectionsStyleSettings = new PluginStyleSettings({\n\tdefaultValues: {\n\t\tcollapsibleSections: {\n\t\t\tclosedBorderWidth: '0',\n\t\t\tclosedPaddingBlock: '4px',\n\t\t\tclosedMargin: '0',\n\t\t\tclosedFontFamily: 'inherit',\n\t\t\tclosedFontSize: 'inherit',\n\t\t\tclosedLineHeight: 'inherit',\n\t\t\tclosedTextColor: ({ resolveSetting }) => resolveSetting('codeForeground'),\n\t\t\tclosedBackgroundColor: ({ theme }) => setAlpha(theme.colors['editor.foldBackground'], 0.2) || 'rgb(84 174 255 / 20%)',\n\t\t\tclosedBorderColor: ({ theme }) => setAlpha(theme.colors['editor.foldBackground'], 0.5) || 'rgb(84 174 255 / 50%)',\n\t\t\topenBorderWidth: '1px',\n\t\t\topenPadding: '0',\n\t\t\topenMargin: '0',\n\t\t\topenBackgroundColor: 'transparent',\n\t\t\topenBackgroundColorCollapsible: ({ theme }) => setAlpha(theme.colors['editor.foldBackground'], 0.1) || 'rgb(84 174 255 / 10%)',\n\t\t\topenBorderColor: 'transparent',\n\t\t},\n\t},\n\tcssVarReplacements: [['collapsibleSections', 'cs']],\n})\n\nexport function getCollapsibleSectionsBaseStyles({ cssVar }: ResolverContext) {\n\t// Icon source: Octicons (MIT licensed)\n\tconst unfoldSvg = createInlineSvgUrl(\n\t\t'm8.177.677 2.896 2.896a.25.25 0 0 1-.177.427H8.75v1.25a.75.75 0 0 1-1.5 0V4H5.104a.25.25 0 0 1-.177-.427L7.823.677a.25.25 0 0 1 .354 0ZM7.25 10.75a.75.75 0 0 1 1.5 0V12h2.146a.25.25 0 0 1 .177.427l-2.896 2.896a.25.25 0 0 1-.354 0l-2.896-2.896A.25.25 0 0 1 5.104 12H7.25v-1.25Zm-5-2a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM6 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 6 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM12 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 12 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5Z'\n\t)\n\tconst foldSvg = createInlineSvgUrl(\n\t\t'M10.896 2H8.75V.75a.75.75 0 0 0-1.5 0V2H5.104a.25.25 0 0 0-.177.427l2.896 2.896a.25.25 0 0 0 .354 0l2.896-2.896A.25.25 0 0 0 10.896 2ZM8.75 15.25a.75.75 0 0 1-1.5 0V14H5.104a.25.25 0 0 1-.177-.427l2.896-2.896a.25.25 0 0 1 .354 0l2.896 2.896a.25.25 0 0 1-.177.427H8.75v1.25Zm-6.5-6.5a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM6 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 6 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5ZM12 8a.75.75 0 0 1-.75.75h-.5a.75.75 0 0 1 0-1.5h.5A.75.75 0 0 1 12 8Zm2.25.75a.75.75 0 0 0 0-1.5h-.5a.75.75 0 0 0 0 1.5h.5Z'\n\t)\n\treturn `\n\t\t.${collapsibleSectionClass} {\n\t\t\tposition: relative;\n\n\t\t\t& summary {\n\t\t\t\tposition: relative;\n\n\t\t\t\tfont-family: ${cssVar('collapsibleSections.closedFontFamily')};\n\t\t\t\tfont-size: ${cssVar('collapsibleSections.closedFontSize')};\n\t\t\t\tline-height: ${cssVar('collapsibleSections.closedLineHeight')};\n\t\t\t\tuser-select: none;\n\t\t\t\t-webkit-user-select: none;\n\n\t\t\t\tcursor: pointer;\n\t\t\t\tcolor: ${cssVar('collapsibleSections.closedTextColor')};\n\t\t\t\tbackground-color: ${cssVar('collapsibleSections.closedBackgroundColor')};\n\t\t\t\t--border-color: ${cssVar('collapsibleSections.closedBorderColor')};\n\t\t\t\t--border-width: ${cssVar('collapsibleSections.closedBorderWidth')};\n\t\t\t\tbox-shadow: inset 0 calc(-1 * var(--border-width)) var(--border-color), inset 0 var(--border-width) var(--border-color);\n\t\t\t\tmargin: ${cssVar('collapsibleSections.closedMargin')};\n\t\t\t\tpadding: 0;\n\n\t\t\t\t/* Hide the default <details> marker */\n\t\t\t\t&::marker {\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\tcontent: \"\";\n\t\t\t\t\twidth: 16px;\n\t\t\t\t\theight: 16px;\n\t\t\t\t}\n\n\t\t\t\t/* Workaround - ::marker does not support content on safari */\n\t\t\t\t&::-webkit-details-marker {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\n\t\t\t\t/* Expand & collapse icons */\n\t\t\t\t:is(.expand, .collapse) {\n\t\t\t\t\tposition: relative;\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\twidth: 16px;\n\t\t\t\t\theight: 16px;\n\t\t\t\t\tvertical-align: text-bottom;\n\t\t\t\t\topacity: 0.75;\n\n\t\t\t\t\t&::after {\n\t\t\t\t\t\tcontent: '';\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tpointer-events: none;\n\t\t\t\t\t\tinset: 0;\n\t\t\t\t\t\tbackground-color: ${cssVar('collapsibleSections.closedTextColor')};\n\t\t\t\t\t\t-webkit-mask-repeat: no-repeat;\n\t\t\t\t\t\tmask-repeat: no-repeat;\n\t\t\t\t\t\tline-height: 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.expand::after {\n\t\t\t\t\t-webkit-mask-image: ${unfoldSvg};\n\t\t\t\t\tmask-image: ${unfoldSvg};\n\t\t\t\t\t/* Ensure that the expand icons of closed sections get printed to avoid gap */\n\t\t\t\t\t-webkit-print-color-adjust: exact;\n\t\t\t\t\tprint-color-adjust: exact;\n\t\t\t\t}\n\t\t\t\t.collapse {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t\t&::after {\n\t\t\t\t\t\t-webkit-mask-image: ${foldSvg};\n\t\t\t\t\t\tmask-image: ${foldSvg};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t.text {\n\t\t\t\t\tmargin-left: 1em;\n\t\t\t\t}\n\n\t\t\t\t.${codeLineClass} .code {\n\t\t\t\t\tpadding-block: ${cssVar('collapsibleSections.closedPaddingBlock')};\n\t\t\t\t\ttext-indent: 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Common open section styles */\n\t\t\t&[open],\n\t\t\t& details[open] + .content-lines {\n\t\t\t\t--border-color: ${cssVar('collapsibleSections.openBorderColor')};\n\t\t\t\t--border-width: ${cssVar('collapsibleSections.openBorderWidth')};\n\t\t\t\tbox-shadow: inset 0 calc(-1 * var(--border-width)) var(--border-color), inset 0 var(--border-width) var(--border-color);\n\t\t\t\tpadding-inline: ${cssVar('collapsibleSections.openPadding')};\n\t\t\t\tmargin-inline: ${cssVar('collapsibleSections.openMargin')};\n\t\t\t}\n\n\t\t\t/* Collapse style 'github' (no wrapper around details) */\n\t\t\t&.github[open] {\n\t\t\t\t& summary {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t\tbackground-color: ${cssVar('collapsibleSections.openBackgroundColor')};\n\t\t\t}\n\n\t\t\t/* Collapse styles 'collapsible-start' and 'collapsible-end' \n\t\t\t   ('collapsible-auto' gets resolved during AST generation) */\n\t\t\t&:is(.collapsible-start, .collapsible-end) {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\n\t\t\t\t& .content-lines {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t\t& details[open] {\n\t\t\t\t\t& .collapse { display: inline-block; }\n\t\t\t\t\t& :is(.expand, .text) { display: none; }\n\t\t\t\t\t& + .content-lines {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t\tbackground-color: ${cssVar('collapsibleSections.openBackgroundColorCollapsible')};\n\t\t\t\t\t}\n\t\t\t\t\t/* Hide re-collapsible headers of open sections when printing */\n\t\t\t\t\t@media print { display: none; }\n\t\t\t\t}\n\t\t\t}\n\t\t\t&.collapsible-end {\n\t\t\t\tflex-direction: column-reverse;\n\t\t\t}\n\t\t}\n\t`\n}\n\nfunction createInlineSvgUrl(d: string) {\n\tconst svg = `<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path d='${d}'/></svg>`\n\tconst encodedSvg = svg.replace(/</g, '%3C').replace(/>/g, '%3E')\n\treturn `url(\"data:image/svg+xml,${encodedSvg}\")`\n}\n"],"mappings":"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","names":[]}