{"version":3,"sources":["../src/utilities/index.ts","../src/copy-button.ts"],"names":["copyButtonStyle"],"mappings":";AAGA,IAAM,kBAAkB;AAEjB,IAAM,iBAAiB,CAAC,UAC7B,MAAM,WAAW,iBAAiB,EAAE,EAAE,KAAK;;;AC+BtC,SAAS,sBACd,UAA6B;AAAA,EAC3B,YAAY;AAAA,EACZ,kBAAkB;AACpB,GACkB;AAClB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,KAAK,MAAM;AACT,WAAK,SAAS,KAAK;AAAA,QACjB,MAAM;AAAA,QACN,SAAS;AAAA,QACT,YAAY;AAAA,UACV,MAAM;AAAA,UACN,OAAO;AAAA,UACP,cAAc;AAAA,UACd,MAAM,KAAK;AAAA,UACX,OAAO;AAAA,UACP,SAAS;AAAA;AAAA,YAAgC;AAAA;AAAA;AAAA,qFAGkC,QAAQ,gBAAgB;AAAA;AAAA,UAClG;AAAA,QACH;AAAA,QACA,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,YACT,YAAY,EAAE,OAAO,QAAQ;AAAA,YAC7B,UAAU,CAAC;AAAA,UACb;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,SAAS;AAAA,YACT,YAAY,EAAE,OAAO,UAAU;AAAA,YAC/B,UAAU,CAAC;AAAA,UACb;AAAA,QACF;AAAA,MACF,CAAC;AACD,WAAK,SAAS,KAAK;AAAA,QACjB,MAAM;AAAA,QACN,SAAS;AAAA,QACT,YAAY,CAAC;AAAA,QACb,UAAU;AAAA,UACR;AAAA,YACE,MAAM;AAAA,YACN,OAAO,gBAAgB;AAAA,cACrB,UAAU,QAAQ;AAAA,cAClB,aAAa,QAAQ;AAAA,cACrB,YAAY,QAAQ;AAAA,YACtB,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEA,SAAS,gBAAgB;AAAA,EACvB,WAAW;AAAA,EACX,cAAc;AAAA,EACd,aAAa;AACf,IAII,CAAC,GAAG;AACN,MAAIA;AAAA;AAAA,IAA4B;AAAA;AAAA,0BAER,QAAQ;AAAA,6BACL,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCtC,MAAI,eAAe,SAAS;AAC1B,IAAAA;AAAA,IAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/B;AACA,SAAO,eAAeA,gBAAe;AACvC","sourcesContent":["/**\n * matches and removes leading and trailing whitespace and newlines\n */\nconst whitespaceRegEx = /\\s*\\n\\s*/g;\n\nexport const trimWhitespace = (input: string) =>\n  input.replaceAll(whitespaceRegEx, '').trim();\n","import { trimWhitespace } from './utilities';\nimport type { ShikiTransformer } from 'shiki';\n\ninterface CopyButtonOptions {\n  feedbackDuration?: number;\n  copyIcon?: string;\n  successIcon?: string;\n  visibility?: 'hover' | 'always';\n}\n\n/**\n * A transformer that adds a copy button to code blocks.\n * @param {Object} options - Options for the copy button behavior and appearance.\n * @param {number} options.feedbackDuration - The duration in milliseconds to show the success icon after copying.\n * @param {string} options.copyIcon - Either data URL svg or inline svg for the copy icon.\n * @param {string} options.successIcon - Either data URL svg or inline svg for the success icon.\n * @returns A Shiki transformer.\n *\n * find icons at https://icones.js.org - copy the \"Data URL\" and paste it as the value of `copyIcon` and/or `successIcon`.\n *\n * @example\n * ```ts\n * import { codeToHtml } from 'shiki'\n * import { transformerCopyButton } from '@rehype-pretty/copy-button'\n *\n * const html = await codeToHtml(`console.log('hello, world')`, {\n *   lang: 'ts',\n *   theme: 'houston',\n *   transformers: [\n *     transformerCopyButton({\n *       visibility: 'always',\n *       feedbackDuration: 2_000,\n *     }),\n *   ],\n * })\n * ```\n */\nexport function transformerCopyButton(\n  options: CopyButtonOptions = {\n    visibility: 'hover',\n    feedbackDuration: 3_000,\n  },\n): ShikiTransformer {\n  return {\n    name: '@rehype-pretty/transformers/copy-button',\n    code(node) {\n      node.children.push({\n        type: 'element',\n        tagName: 'button',\n        properties: {\n          type: 'button',\n          title: 'Copy code',\n          'aria-label': 'Copy code',\n          data: this.source,\n          class: 'rehype-pretty-copy',\n          onclick: trimWhitespace(/* javascript */ `\n            navigator.clipboard.writeText(this.attributes.data.value);\n            this.classList.add('rehype-pretty-copied');\n            window.setTimeout(() => this.classList.remove('rehype-pretty-copied'), ${options.feedbackDuration});\n          `),\n        },\n        children: [\n          {\n            type: 'element',\n            tagName: 'span',\n            properties: { class: 'ready' },\n            children: [],\n          },\n          {\n            type: 'element',\n            tagName: 'span',\n            properties: { class: 'success' },\n            children: [],\n          },\n        ],\n      });\n      node.children.push({\n        type: 'element',\n        tagName: 'style',\n        properties: {},\n        children: [\n          {\n            type: 'text',\n            value: copyButtonStyle({\n              copyIcon: options.copyIcon,\n              successIcon: options.successIcon,\n              visibility: options.visibility,\n            }),\n          },\n        ],\n      });\n    },\n  };\n}\n\nfunction copyButtonStyle({\n  copyIcon = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\",\n  successIcon = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\",\n  visibility = 'hover',\n}: {\n  copyIcon?: string;\n  successIcon?: string;\n  visibility?: 'hover' | 'always';\n} = {}) {\n  let copyButtonStyle = /* css */ `\n    :root {\n      --copy-icon: url(\"${copyIcon}\");\n      --success-icon: url(\"${successIcon}\");\n    }\n    pre:has(code) {\n      position: relative;\n    }\n    pre button.rehype-pretty-copy {\n      right: 1px;\n      padding: 0;\n      width: 24px;\n      height: 24px;\n      display: flex;\n      margin-top: 2px;\n      margin-right: 8px;\n      position: absolute;\n      border-radius: 25%;\n      backdrop-filter: blur(3px);\n      & span {\n        width: 100%;\n        aspect-ratio: 1 / 1;\n      }\n      & .ready {\n        background-image: var(--copy-icon);\n      }\n      & .success {\n        display: none; background-image: var(--success-icon);\n      }\n    }\n    &.rehype-pretty-copied { \n      & .success { \n        display: block;\n      } & .ready {\n        display: none;\n      }\n    }\n    pre button.rehype-pretty-copy.rehype-pretty-copied {\n      opacity: 1;\n      & .ready { display: none; }\n      & .success { display: block; }\n    }\n`;\n  if (visibility === 'hover') {\n    copyButtonStyle += /* css */ `\n        pre button.rehype-pretty-copy { opacity: 0; }\n        figure[data-rehype-pretty-code-figure]:hover > pre > code button.rehype-pretty-copy {\n          opacity: 1;\n        }\n      `;\n  }\n  return trimWhitespace(copyButtonStyle);\n}\n"]}